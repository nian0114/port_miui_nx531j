#!/bin/bash

# Do not edit this file unless you know what you are doing

deodex_start() {
	cd $romdir
	exit_deo() {
		echo ""
	}
	delete_meta_inf() {
		echo "$bluet$t_deodex_del_meta_inf$normal"
		find system -name *.apk 2>/dev/null | grep -v "system\/framework\/" | while read line; do
			$aapt remove "$line" META-INF/CERT.RSA META-INF/CERT.SF META-INF/MANIFEST.MF
		done
	}
	choose_jartitle() {
		thecho=""
		countbak=$(find $tools/smali/current -name $jarname*.jar | wc -l)
		if [[ $countbak = "1" ]]; then
			thecho=$(find $tools/smali/current -name $jarname*.jar)
		elif [[ $countbak -gt "1" ]]; then
			while [[ $thecho = "" ]]; do
				echo "$greenb$jartitle$normal"
				echo ""
				findbak=$(find $tools/smali/current -name $jarname*.jar | rev | cut -d"/" -f1 | rev | sort)
				choosepr bakcho in ${findbak[@]}
				if [[ $REPLY = "q" ]]; then
					exit
				else
					thecho="$tools/smali/current/$bakcho"
				fi
			done
		fi
	}
	choose_oat2dex() {
		choice=""
		while [[ ! ${choice} =~ ^[1-2]$ ]]; do
			echo "$t_deodex_oat2dex_ver"
			echo ""
			echo "1) $t_deodex_oat2dex_official"
			echo "2) $t_deodex_oat2dex_latest"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		if [[ $choice = "1" ]]; then
			oat2dex=$(find $tools/smali/old -name *oat2dex*)
		elif [[ $choice = "2" ]]; then
			jarname="oat2dex"
			jartitle="$t_title_cho_oat2dex"
			choose_jartitle
			oat2dex="$thecho"
		fi
	}
	rm -rf $logs/extraodex.txt
	if [[ ! -d "$framedir" || ! -f $sysdir/build.prop ]]; then
		echo "$redb$yellowt$bold$t_missing$normal"
		echo -e "$redt$t_deodex_copy_frame_prop $yellowt$romname/system$normal"
		exit_deo
	fi
	if [[ ! "$odexstatus" = "Odexed" ]]; then
		echo "$redt$t_deodex_no_odex$normal"
		exit_deo
	fi
	if [[ $api -ge 21 && $(find $framedir -name boot.oat) = "" ]]; then
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_boot_oat$normal"
		exit_deo
	fi
	if [[ -f $sysdir/odex.sqsh ]]; then
		sqshfile="odex.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex1.sqsh ]]; then
			sqshfile="odex1.sqsh"
			deodex_sqsh
			if [[ -f $sysdir/odex2.sqsh ]]; then
				sqshfile="odex2.sqsh"
				deodex_sqsh
			fi
		fi
	elif [[ -f $sysdir/odex.app.sqsh ]]; then
		sqshfile="odex.app.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex.priv-app.sqsh ]]; then
			sqshfile="odex.priv-app.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/odex.framework.sqsh ]]; then
			sqshfile="odex.framework.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/etc/product/orig.applications.sqsh ]]; then
			sqshfile="orig.applications.sqsh"
			deodex_sqsh
		fi
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks.orig > $prfiles/symlinks.orig2
		mv $prfiles/symlinks.orig2 $prfiles/symlinks.orig
	fi
	get_heapsize
	if [[ $api -lt 21 ]]; then
		smali=$(find $tools/smali/old -name *smali* | grep -v "baksmali")
		baksmali=$(find $tools/smali/old -name *baksmali*)
		deodex_old
		return 1
	elif [[ $api -eq 21 || $api -eq 22 ]]; then
		choose_oat2dex
		dtype="l"
		deodex
		return 1
	elif [[ $api -eq 23 && ! $androidversion = "N" ]]; then
		choice=""
		while [[ ! ${choice} =~ ^[1-3]$ ]]; do
			echo "$t_deodex_use_method"
			echo ""
			echo "1) oat2dex"
			echo "2) smali/baksmali"
			echo ""
			read -n 1 -p "$t_select" choice
		done
		# START M oat2dex
		if [[ $choice = "1" ]]; then
			choose_oat2dex
			dtype="m"
			deodex
		# START M smali/baksmali
		elif [[ $choice = "2" ]]; then
			jarname="smali"
			jartitle="$t_title_cho_smali"
			choose_jartitle
			smali="$thecho"

			jarname="baksmali"
			jartitle="$t_title_cho_baksmali"
			choose_jartitle
			baksmali="$thecho"
			dtype="m2"
			deodex
		fi
		return 1
	elif [[ $api -eq 23 && $androidversion = "N" ]] || [[ $api -ge 24 ]]; then
		if [[ $androidversion = "O" ]]; then
			api="26"
		fi
		jarname="smali"
		jartitle="$t_title_cho_smali"
		choose_jartitle
		smali="$thecho"

		jarname="baksmali"
		jartitle="$t_title_cho_baksmali"
		choose_jartitle
		baksmali="$thecho"
		dtype="n2"
		deodex
	else
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_api$normal"
		echo ""
		exit_deo
	fi
}
deodex() {
	arch=""
	arch2=""
	archtmp="arm64 x86_64 arm x86"
	for i in $archtmp; do
		archtest=$(find $framedir -type d 2>/dev/null | grep -m 1 -o "$i$")
		if [[ $archtest != "" ]]; then
			break
		fi
	done
	if [[ $(echo "$archtest" | grep "64") != "" ]]; then
		arch2test=$(echo "$archtest" | sed 's/_64//; s/64$//')
	fi
	if [[ $archtest != "" && -f $framedir/$archtest/boot.oat ]]; then
		arch="$archtest"
		if [[ $arch2test != "" && -f $framedir/$arch2test/boot.oat ]]; then
			arch2="$arch2test"
		fi
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		echo "$bluet$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ $arch2 != "" ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		if [[ $dtype = "m2" || $dtype = "n2" ]]; then
			echo -e "$bluet$t_deodex_method${greent}\t$(basename $smali)"
			echo -e "\t$(basename $baksmali)$normal"
		elif [[ $dtype = "l" || $dtype = "m" ]]; then
			echo -e "$bluet$t_deodex_method${greent}\t$(basename $oat2dex)$normal"
		fi
		echo ""
	else
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodex() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -d $deoappdir/$app/$deoarch ]] || [[ ! -f $deoappdir/$app/$app.apk ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app/$app.apk | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				if [[ $dtype = "m2" || $dtype = "n2" ]]; then
					classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoappdir/$app/$deoarch/$app.odex 2>&1)
					echo "$classes" >> $logs/deodex.log
					echo "$classes" | while read line; do
						apkdex=$(basename $(echo "$line"))
						if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
							dexclass="classes.dex"
						else
							dexclass=$(echo "$apkdex" | cut -d":" -f2-)
						fi
						java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $deoappdir/$app/$deoarch/$app.odex/$apkdex -o $deoappdir/$app/$deoarch/smali >> $logs/deodex.log
						java -Xmx${heapsize}m -jar $smali assemble -a $api $deoappdir/$app/$deoarch/smali -o $deoappdir/$app/$deoarch/$dexclass >> $logs/deodex.log
						rm -rf $deoappdir/$app/$deoarch/smali
						if [[ ! -f $deoappdir/$app/$deoarch/$dexclass ]]; then
							echo "$deoappdir/$app/$deoarch/$dexclass" >> $logs/deodex_fail_list
							continue
						fi
					done
				elif [[ $dtype = "m" || $dtype = "l" ]]; then
					java -Xmx${heapsize}m -jar $oat2dex $deoappdir/$app/$deoarch/$app.odex $framedir/$deoarch2/odex >> $logs/deodex.log
					if [[ ! -f $deoappdir/$app/$deoarch/$app.dex ]]; then
						rm -rf $deoappdir/$app/$deoarch/$app-classes*.dex
						continue
					fi
					mv $deoappdir/$app/$deoarch/$app.dex $deoappdir/$app/$deoarch/classes.dex
					find $deoappdir/$app/$deoarch -name $app-classes*.dex | while read line; do
						appclassdex=$(basename $line)
						appclassdir=$(dirname $line)
						classname=$(echo "$appclassdex" | cut -d"-" -f2)
						mv $line $appclassdir/$classname
					done
				fi
				$aapt add -fk $deoappdir/$app/$app.apk $deoappdir/$app/$deoarch/classes*.dex >> $logs/zip.log
				if [[ $dtype = "l" ]]; then
					rm -rf $deoappdir/$app/$deoarch
				else
					rm -rf $deoappdir/$app/oat
				fi
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				if [[ $dtype != "l" ]]; then
					rm -rf $deoappdir/$app/oat
				else
					rm -rf $deoappdir/$app/$deoarch
				fi
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_$dtype
	rm -rf $logs/*.log $logs/deodex_fail_list
	if [[ ! $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ $dtype != "l" ]]; then
		odextmp=$(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/\|system/vendor/framework" | rev | cut -d"/" -f4- | rev | sort -u)
	else
		odextmp=$(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/$arch/\|system/framework/$arch2/\|system/app/\|system/priv-app/" | rev | cut -d"/" -f3- | rev | sort -u)
	fi
	if [[ -d $sysdir/app && $odextmp != "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		extraapp=""
		line=""
		for line in $odextmp; do
			if [[ ! $(basename "$line" | grep "^\.") = "" ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				line="$newappdir"
				extraapp=$(basename $line)
			else
				extraapp=$(basename $line)
				echo "$sysdir/app/$extraapp $romdir/$line" >> $logs/extramv.txt
			fi
			mv $romdir/$line $sysdir/app/$extraapp
		done
	fi
	chimerao=$(find $sysdir/priv-app/PrebuiltGmsCore/app_chimera -name *.odex 2>/dev/null | grep "$arch")
	chimerav=$(find $sysdir/priv-app/PrebuiltGmsCore/app_chimera -name *.vdex 2>/dev/null | grep "$arch")
	if [[ $chimerao != "" ]]; then
		for i in $(echo "$chimerao"); do
			aname=$(basename $i | sed 's/\.odex//')
			dname=$(echo "$i" | rev | cut -d"/" -f4)
			mkdir -p $sysdir/app/$aname/oat/$arch
			mv $i $sysdir/app/$aname/oat/$arch/
			if [[ $chimerav != "" ]]; then
				mv $(echo "$i" | sed 's/\.odex$/\.vdex/') $sysdir/app/$aname/oat/$arch/
			fi
			mv $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/$aname.apk $sysdir/app/$aname/
			echo "$sysdir/app/$aname/$aname.apk $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/" >> $logs/extramv.txt
		done
		rm -rf $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/oat
	fi
	if [[ -d "$sysdir/vendor/framework" ]]; then
		vframe=$(find $sysdir/vendor/framework -name *.jar 2>/dev/null)
		for i in $vframe; do
			nframe=$(basename $i | sed 's/\.jar$//')
			dframe=$(dirname $i)
			mv $i $framedir/
			mv $dframe/oat/$arch/$nframe.odex $framedir/oat/$arch/
			if [[ -f $dframe/oat/$arch/$nframe.vdex ]]; then
				mv $dframe/oat/$arch/$nframe.vdex $framedir/oat/$arch/
			fi
			echo "$framedir/$nframe.jar $i" >> $logs/extramv.txt
		done
		rm -rf $sysdir/vendor/framework/oat
	fi
	if [[ $dtype = "l" || $dtype = "m" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_deop"
		echo "----------------------------------------------------"
		echo ""
		if [[ ! -d "$framedir/$arch/odex" ]]; then
			java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch/boot.oat >> $logs/deodex.log
		fi
		if [[ ! $arch2 = "" ]]; then
			if [[ ! -d "$framedir/$arch2/odex" ]]; then
				java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch2/boot.oat >> $logs/deodex.log
			fi
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ $dtype = "l" ]]; then
			if [[ ! $arch2 = "" && -d $appdir/$app/$arch && -d $appdir/$app/$arch2 ]]; then
				rm -rf $appdir/$app/$arch2
			fi
		else
			if [[ ! $arch2 = "" && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
				rm -rf $appdir/$app/oat/$arch2
			fi
		fi
	done
	deoappdir="$appdir"
	if [[ $dtype != "l" ]]; then
		deoarch="oat/$arch"
		deoarch2="$arch"
		dodeodex
		if [[ ! $arch2 = "" ]]; then
			deoarch="oat/$arch2"
			deoarch2="$arch2"
			dodeodex
		fi
	else
		deoarch="$arch"
		deoarch2="$arch"
		dodeodex
		if [[ ! $arch2 = "" ]]; then
			deoarch="$arch2"
			deoarch2="$arch2"
			dodeodex
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ $dtype != "l" ]]; then
			if [[ ! $arch2 = "" && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
				rm -rf $privdir/$privapp/oat/$arch2
			fi
		else
			if [[ ! $arch2 = "" && -d $privdir/$privapp/$arch && -d $privdir/$privapp/$arch2 ]]; then
				rm -rf $privdir/$privapp/$arch2
			fi
		fi
	done
	deoappdir="$privdir"
	if [[ $dtype != "l" ]]; then
		deoarch="oat/$arch"
		deoarch2="$arch"
		dodeodex
		if [[ ! $arch2 = "" ]]; then
			deoarch="oat/$arch2"
			deoarch2="$arch2"
			dodeodex
			deoarch="oat/$arch"
			deoarch2="$arch"
		fi
	else
		deoarch="$arch"
		deoarch2="$arch"
		dodeodex
		if [[ ! $arch2 = "" ]]; then
			deoarch="$arch2"
			deoarch2="$arch2"
			dodeodex
			deoarch="$arch"
			deoarch2="$arch"
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	if [[ $dtype = "n2" || $dtype = "m2" ]]; then
		if [[ $dtype = "n2" ]]; then
			ls $framedir/$deoarch2 | grep .oat$ | sort | while read line; do
				if [[ $line != "boot.oat" ]]; then
					framejar=$(echo "$(echo "$line" | sed 's/^boot-//; s/\.oat$//').jar")
					if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
						echo ""
						echo "$greent$frame $t_deodex_app_already$normal"
						echo ""
						continue
					fi
				fi
				echo ""
				echo "$t_deodex_deodexing $line"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch2/$line | rev | cut -d"/" -f1 | rev)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line2; do
					if [[ $(echo "$line2" | grep classes) = "" ]]; then
						line3=$(echo "$line2" | rev | cut -d"." -f2- | rev)
						dexclass="classes.dex"
					else
						line3=$(echo "$line2" | rev | cut -d"." -f3- | rev)
						dexclass=$(echo "$line2" | cut -d":" -f2-)
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch2/$line/$line2 -o $framedir/$deoarch2/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble -a $api $framedir/$deoarch2/smali -o $framedir/$line3.jar:$dexclass >> $logs/deodex.log
					rm -rf $framedir/$deoarch2/smali
				done
			done
		elif [[ $dtype = "m2" ]]; then
			classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch2/boot.oat | rev | cut -d"/" -f1 | rev)
			line=""
			for line in $(echo "$classes"); do
				if [[ $(echo "$line" | grep classes) = "" ]]; then
					framejar="$line"
					dexclass=":classes.dex"
				else
					framejar=$(echo "$line" | cut -d":" -f1)
					dexclass=""
				fi
				if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
					echo ""
					echo "$greent$frame $t_deodex_app_already$normal"
					echo ""
					continue
				fi
				line2=$(echo "$line" | rev | cut -d"." -f2- | rev)
				echo ""
				echo "$t_deodex_deodexing $line2"
				echo ""
				java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch2/boot.oat/$line -o $framedir/smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali assemble -a $api $framedir/smali -o $framedir/$line$dexclass >> $logs/deodex.log
				rm -rf $framedir/smali
			done
		fi
		if [[ -d $framedir/$deoarch ]]; then
			frame=""
			for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
				framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
				if [[ ! $($p7z l $framedir/$framejar | grep classes.dex) = "" ]]; then
					echo ""
					echo "$greent$frame $t_deodex_app_already$normal"
					echo ""
					continue
				fi
				echo ""
				echo "$t_deodex_deodexing $frame"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $framedir/$deoarch/$frame)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line; do
					apkdex=$(basename $(echo "$line"))
					if [[ $(echo "$apkdex" | grep classes) = "" ]]; then
						dexclass="$apkdex:classes.dex"
					else
						dexclass="$apkdex"
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $framedir/$deoarch/$frame/$apkdex -o $framedir/$deoarch/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble -a $api $framedir/$deoarch/smali -o $framedir/$dexclass >> $logs/deodex.log
					rm -rf $framedir/$deoarch/smali
				done
			done
		fi
	elif [[ $dtype = "l" || $dtype = "m" ]]; then
		if [[ -d $framedir/$deoarch ]]; then
			for frame in $(ls $framedir/$deoarch | grep .odex$ | sort); do
				echo ""
				echo "$t_deodex_deodexing $frame"
				echo ""
				errtest=$(echo "$frame" | rev | cut -d"." -f2- | rev)
				java -Xmx${heapsize}m -jar $oat2dex $framedir/$deoarch/$frame $framedir/$deoarch2/odex >> $logs/deodex.log
			done
		fi
		mv $framedir/$deoarch2/dex/* $framedir/$deoarch/
		ls $framedir/$deoarch | grep "\.dex$" | while read line; do
			if [[ $(echo "$line" | grep classes) = "" ]]; then
				frame=$(echo "$(echo "$line" | sed 's/\.dex//').jar:classes.dex")
			else
				dexclass=$(echo "$line" | rev | cut -d"-" -f1 | rev)
				frame=$(echo "$(echo "$line" | sed "s/-$dexclass//").jar:$dexclass")
			fi
			mv $framedir/$deoarch/$line $framedir/$frame
		done
	fi
	echo "$bluet$t_deodex_pack_jar$normal"
	ls $framedir | grep "jar:classes.dex" | sort | while read line; do
		line2=$(echo "$line" | cut -d":" -f1)
		ls $framedir | grep .dex$ | grep "^$line2" | while read line3; do
			line4=$(echo "$line3" | cut -d":" -f2)
			mv $framedir/$line3 $framedir/$line4
		done
		if [[ -f $framedir/classes.dex ]]; then
			$aapt add -fk $framedir/$line2 $framedir/classes*.dex >> $logs/zip.log
		else
			echo "ERROR: $line2 has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf $framedir/classes*.dex
	done
	if [[ $dtype = "l" || $dtype = "m" ]]; then
		rm -rf $framedir/$arch/odex
		rm -rf $framedir/$arch/dex
		if [[ ! $arch2 = "" ]]; then
			rm -rf $framedir/$arch2/odex
			rm -rf $framedir/$arch2/dex
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	if [[ -s $logs/extramv.txt ]]; then
		cat $logs/extramv.txt | while read line; do
			mv $line
			if [[ $(echo "$line" | grep "app_chimera") != "" ]]; then
				rm -rf $(dirname $(echo "$line" | gawk '{print $1}'))
			fi
		done
	fi
	rm -rf $logs/extramv.txt
	rm -rf $framedir/oat
	rm -rf $framedir/$arch
	if [[ ! $arch2 = "" ]]; then
		rm -rf $framedir/$arch2
	fi

	if [[ $dtype = "l" || $dtype = "m" ]]; then
		deodex_fail_list=$(grep "convertToDex: skip" $logs/deodex.log | cut -d"/" -f2- | sort -u)
	else
		deodex_fail_list=$(cat $logs/deodex_fail_list 2>/dev/null)
	fi
	if [[ ! $deodex_fail_list = "" ]]; then
		echo -e "$t_deodex_problems"
		echo "$yellowt$deodex_fail_list$normal"
		if [[ $dtype = "m" ]]; then
			echo ""
			echo "$greent$t_deodex_try_smali$normal"
		fi
		echo ""
		read -p "$t_enter_continue"
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		if [[ $dtype = "n" ]]; then
			delete_meta_inf
		fi
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_old() {
	echo "${bluet}$t_startup_project $greent$romname"
	echo "$bluet$t_startup_version $greent$androidversion"
	echo "$bluet$t_deodex_api$greent$api$normal"
	echo -e "$bluet$t_deodex_method${greent}\t$(basename $smali)"
	echo -e "\t$(basename $baksmali)$normal"
	echo ""
	read -n 1 -p "$t_deodex_continue_q"
	if [[ ! $REPLY = "y" ]]; then
		rom_tools
		return 1
	fi
	dodeodexold() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -f $deoappdir/$app.odex ]]; then
				continue
			fi
			if [[ $($p7z l $deoappdir/$app.$deoext | grep classes.dex) = "" ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				java -Xmx${heapsize}m -jar $baksmali -a $api -d $framedir -x $deoappdir/$app.odex -o $deoappdir/smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali -a $api $deoappdir/smali -o $deoappdir/classes.dex >> $logs/deodex.log
				$aapt add -fk $deoappdir/$app.$deoext $deoappdir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $deoappdir/$app.odex
				rm -rf $deoappdir/smali
				rm -rf $deoappdir/classes.dex
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app.odex
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_old
	rm -rf $logs/*.log
	if [[ -d $sysdir/app && ! $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/") = "" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/" | rev | cut -d"." -f2- | rev > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			line=""
			cat $logs/extraodex.txt | while read line; do
				( exec mv $romdir/$line* $sysdir/app/ 2<&1 ) > /dev/null
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$appdir"
	deoext="apk"
	dodeodexold
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp.apk $romdir/$line.apk
		done
	fi
	rm -rf $logs/extraodex.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$privdir"
	deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $framedir | grep .jar | rev | cut -c 5- | rev)
	deoappdir="$framedir"
	deoext="jar"
	dodeodexold
	applist=$(ls $framedir | grep -E .apk | rev | cut -c 5- | rev)
	deoappdir="$framedir"
	deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/*.odex
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ "$stillodexed" = "" ]]; then
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_sqsh() {
	echo "$bluet$t_general_extracting $sqshfile ...$normal"
	if [[ ! $(echo "$sqshfile" | grep "priv-app\|odex.app\|framework") = "" ]]; then
		cd $sysdir
		sqshtype=$(echo "$sqshfile" | cut -d"." -f2)
		sqshdir=$(echo "sqshtmp/$sqshtype")
	elif [[ ! $(echo "$sqshfile" | grep "orig.applications") = "" ]]; then
		cd $sysdir/etc/product
		mkdir -p sqshtmp
		mv $sqshfile sqshtmp/
		cd sqshtmp
		$p7z x $sqshfile 2>/dev/null >> $logs/zip.log

		echo "$bluet$t_deodex_move_odex$normal"
		if [[ ! $(ls | grep arm64) = "" ]]; then
			odexarch="arm64"
			cd arm64
		elif [[ ! $(ls | grep arm) = "" ]]; then
			odexarch="arm"
			cd arm
		fi
		ls | while read line; do
			odexapp=$(echo "$line" | sed 's/\.odex//')
			mv $line $sysdir/etc/product/applications/$odexapp/oat/$odexarch/
			mv $sysdir/etc/product/sqshtmp/$odexapp/$odexapp.apk $sysdir/etc/product/applications/$odexapp/
		done
		rm -rf $sysdir/etc/product/sqshtmp $sysdir/etc/product/orig.applications
		sqshfile=""
		cd $romdir
		return 1
	else
		sqshdir="sqshtmp"
	fi
	mkdir -p $sqshdir
	mv $sqshfile $sqshdir/
	cd $sqshdir
	$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
	rm -rf $sqshfile
	echo "$bluet$t_deodex_move_odex$normal"
	if [[ -d $sysdir/$sqshdir/arm || -d $sysdir/$sqshdir/arm64 ]]; then
		if [[ -d $sysdir/$sqshdir/arm ]]; then
			cd $sysdir/$sqshdir/arm
			sqsharch="arm"
		elif [[ -d $sysdir/$sqshdir/arm64 ]]; then
			cd $sysdir/$sqshdir/arm64
			sqsharch="arm64"
		fi
		if [[ ! $sqshtype = "framework" ]]; then
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				mkdir -p $sysdir/$sqshtype/$tmpapp/oat/$sqsharch
				mv "$line" $sysdir/$sqshtype/$tmpapp/oat/$sqsharch/
			done
		else
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				if [[ -d $framedir/$tmpapp ]]; then
					mkdir -p $framedir/$tmpapp/oat/$sqsharch
					mv "$line" $framedir/$tmpapp/oat/$sqsharch/
				fi
			done
			mkdir -p $sysdir/$sqshtype/oat/$sqsharch
			mv * $sysdir/$sqshtype/oat/$sqsharch/
		fi
	else
		cd $sysdir/sqshtmp
		line=""
		find . -type d | sed 's/^.\///' | while read line; do
			mkdir -p $sysdir/$line
		done
		line=""
		find . -type f | sed 's/^.\///' | while read line; do
			mv $line $sysdir/$line
		done
	fi
	cd $sysdir
	rmleft=$(echo "$sqshfile" | sed 's/\.sqsh$//')
	rm -rf sqshtmp $rmleft
	sqshfile=""
	cd $romdir
}

get_heapsize() {
	if [[ -f $tools/heapsize ]]; then
		heapsize=$(cat $tools/heapsize)
	else
		heapsize=$(grep MemTotal /proc/meminfo | gawk '{ print $2/1024-500 }' | cut -d"." -f1)
		if [ $heapsize -lt 1024 ]; then
			if [ ! -f /var/swapfile ];then
				cd /var/
				dd if=/dev/zero of=swapfile bs=1024 count=1000000
				/sbin/mkswap swapfile
				/sbin/swapon swapfile
			fi
			heapsize=1024
		fi
	fi
}

isodexstatus() {
	if [[ -d $romdir ]]; then
		if [[ $(find $sysdir $romdir/vendor -name *.odex 2>/dev/null) = "" && ! -f $sysdir/odex.sqsh && $(find $framedir -name boot.oat) = "" ]]; then
			mmode=""
			if [[ $api -ge "23" ]]; then
				if [[ -f $prfiles/deodex_m ]]; then
					mmode=" - oat2dex"
				elif [[ -f $prfiles/deodex_m2 || -f $prfiles/deodex_n2 ]]; then
					mmode=" - smali/baksmali"
				fi
			fi
			odexstatus="Deodexed"
			odexstatus1=$(echo "$greent$t_deodexed$mmode$normal")
		else
			odexstatus="Odexed"
			odexstatus1=$(echo "$redt$t_odexed$normal")
		fi
	fi
}


rom_tools() {
	echo "$bluet$t_boot_status$normal"
	odexstatus=""
	odexstatus1=""
	dataapp=""
	dataapp1=""
	
	isodexstatus
	debloatstatus1=""

	deodex_start
}

redt=$(tput setaf 1)
redb=$(tput setab 1)
greent=$(tput setaf 2)
greenb=$(tput setab 2)
yellowt=$(tput setaf 3)
yellowb=$(tput setab 3)
bluet=$(tput setaf 4)
blueb=$(tput setab 4)
magentat=$(tput setaf 5)
magentab=$(tput setab 5)
cyant=$(tput setaf 6)
cyanb=$(tput setab 6)
whiteb=$(tput setab 7)
bold=$(tput bold)
italic=$(tput sitm)
stand=$(tput smso)
underline=$(tput smul)
normal=$(tput sgr0)
clears=$(tput clear)

if [[ ! $(echo $(pwd) | grep " ") = "" ]]; then
	echo "$redb$yellowt${bold}ERROR:$normal"
	echo -e "${redt}The kitchen must be run in a path without spaces.$normal\n\n${bluet}CURRENT PATH:"
	echo "$yellowt$(pwd)$normal"
	echo ""
	read -p "Press ENTER to exit"
	exit
fi
export base=$(pwd)
tools=$base/tools

p7z=$tools/7z
aapt="$tools/aapt"
romdir=$base/superr_miui
if [[ -f $romdir/system/system/build.prop ]]; then
	sysdir="$romdir/system/system"
else
	sysdir="$romdir/system"
fi

prfiles=$romdir/00_project_files
framedir=$sysdir/framework
appdir=$sysdir/app
privdir=$sysdir/priv-app
usdir=$romdir/META-INF/com/google/android
logs=$romdir/00_project_files/logs
androidversion=$(grep "ro.build.version.release" $sysdir/build.prop | cut -d"=" -f2)
api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)

source $tools/language/english-srk


rom_tools
